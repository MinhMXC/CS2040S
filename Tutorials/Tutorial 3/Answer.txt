1.
a. 1 1 1 1 1 1 1 // 1 2 3 4 5 6 7 8 9 0

b. No. Yes. No because it involves creating a whole new array instead of inplace
int low = 0;
int high = N - 1;
for [0...N) do
  if (a[i] <= pivot)
    a_new[low] = a[i];
    low++;
   else
    a_new[high] = a[i];
    high--;
end

// Doeesn't work because the high array position will be flipped and with duplicated pivots
// Solution: Create a pair with key as the actualy value and value as the initial position

c. O(n)
d. O(nk) //worst case partition always pick bad pivot


2.
Use array to check whether an element exists 
a. O(n) //Go through entire array
b. O(nlogn) / O(n) if integer //Sort then eliminate duplicates
c. O(aloga + blogb) = O(nlogn) / O(n) if integer //sort A and B and merge
d. O(n) classic TwoSum

3.
Partition like there's no tmr. Kinda like quicksort
1. Get some random kid
2. Try every shoes on him, then partition it into smaller and bigger shoes.
   Don't put the shoes on him yet
3. Get another kid and let him try the shoes that fit the previous kids.
   If smaller, search in the smaller partition, else the bigger partition.
4. Do this recursively and do not put on the correct shoes.
5. One will need to compare with all previously fit shoes.
   Eg: the 3rd child will need to compare with the 1st and 2nd child shoes to figure out the correct partition
   When partition are filled up, then no need to check some shoes.
6. After going through all, every child shoes should be known and give them their shoes.

// Same solution but partition both the shoes and the children, then give pivot kid his shoes and recurse

4.
a. Check through all the pivot to know what partition the element belongs to.
// More efficient: Use a binary search to find which pivot to put inside
b. O(nlogk)
c. T(n) = kT(n / k) + O(nlogk)
d. O(nlogn)

5.
a. The partition algorithm in quicksort. Yes. No.
b. Sort element into the index of the new array of length M + 1. O(n)
c. O(64n) = O(n). Better than O(nlogn) when logn < 64.
d. Look at 8 bits at a time using counting sort instead of 1 bit at a time.